import pygame
from settings import *


# 69 x 33 map

_ = False
mini_map = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, 1],
    [1, _, 1, _, 1, 1, _, _, 1, _, _, _, 1, 1, _, _, 1, _, _, 1, _, 1, 1, 1, 1, _, 1, _, _, _, _, 1, 1, 1, _, _, _, _, _, _, _, 1, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, 1, 1, _, _, 4, _, _, 1, 1, _, _, _, _, _, _, 1, _, _, 1, _, 1, _, _, 1, _, 1, _, 1, _, _, _, _, _, _, 1, _, 1, 1, 1, 4, 1, _, _, _, _, 1, _, _, 1, _, _, 1, _, _, 1, _, _, 1, _, _, 1, _, _, 1, _, _, 1, 1],
    [1, _, 1, 1, 1, 1, _, _, _, 1, _, 1, 1, 6, 1, _, _, _, _, 1, _, 1, _, _, 1, _, 6, _, 1, _, _, _, _, _, _, 1, _, _, _, _, _, 1, _, _, 1, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, 1, _, 1, _, _, 1, _, _, _, _, _, _, 1, _, 1, 1, _, 1, _, 1, 7, 1, 1, _, _, _, 1, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, 1, 1, _, _, _, _, _, 1, 1, 1, _, _, 1, _, _, _, _, 1, _, 1, _, _, _, _, 1, _, _, _, _, _, _, 1, 1, 1, _, _, _, _, _, 1, 1, 1, 1, _, _, _, _, 1, _, _, 1, _, _, 1, _, _, 1, _, _, 1, _, _, 1, _, _, 1, 1],
    [6, _, 1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, 1, 1, 1, 1, 1, 1, 1, _, 1, _, _, 1, _, _, _, _, _, _, _, 1, 1, _, _, 1, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 5],
    [1, _, 1, 1, 1, 6, 1, 1, _, 1, 1, 1, 1, _, 1, 1, 1, _, _, _, _, 1, _, 1, _, _, _, _, _, 1, _, _, _, _, _, _, _, 1, _, _, _, 1, _, 1, _, _, 1, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, 1],
    [1, _, 1, _, _, _, _, _, _, 1, _, 1, _, _, _, _, 1, _, _, _, _, 1, _, 1, _, _, _, _, _, 1, 1, 1, 5, 1, 1, 1, 6, 1, _, _, _, _, _, 1, _, _, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, _, 1, _, 1, _, _, _, _, 1, _, _, _, _, _, _, 1, _, 1, 1, _, 6, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, 1, _, _, 1, _, _, _, _, 1, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, 1],
    [1, 1, 1, _, 1, _, _, 1, 1, 1, _, _, _, _, _, _, 1, _, _, 1, _, 1, _, 1, _, 1, 4, 1, _, 1, _, _, _, _, _, _, _, 1, _, 1, 1, 1, _, 1, 1, 1, 1, _, 1, _, _, 1, _, 1, 1, 1, _, _, 4, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, 1, _, _, 1, _, 1, _, 1, _, _, _, 1, _, _, _, _, 1, _, 1, _, _, _, _, 1, _, _, _, 1, _, _, 1, _, 1, 1, _, 1, _, _, _, 1, _, _, 1, _, 1, 1, 1, _, 1, 1, 1, _, 1],
    [1, _, _, 1, _, 1, 1, 1, 4, 1, _, _, 1, 1, _, _, 4, _, _, _, _, 1, _, _, _, _, _, 1, _, _, _, 1, 1, _, 1, 7, _, _, _, 1, _, _, _, _, _, _, 1, _, _, _, _, 1, _, _, _, 1, _, _, 1, _, 1, _, _, _, _, _, 1, _, 1],
    [1, _, _, 1, _, _, _, _, _, 1, _, _, _, _, _, _, 1, _, _, 1, 1, 1, _, 1, 1, _, _, 6, _, _, 1, 1, _, _, _, 1, 1, _, _, 1, 1, _, _, 1, _, _, 1, 1, 1, 1, _, _, _, _, _, _, _, _, 1, _, 1, 1, 1, _, _, _, 1, 1, 1],
    [1, _, _, 1, 1, 1, 1, _, _, 1, _, _, _, _, _, _, 1, _, _, _, _, 1, _, _, 1, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, 2, 1, _, _, 1, 1, 1, 1, _, _, _, _, 1, 1, 1, 1, _, _, _, 1, _, _, _, _, _, 1, _, _, _, 1],
    [3, _, _, _, _, _, 6, _, _, _, _, 1, _, _, _, _, 1, _, _, _, _, 1, _, _, 1, _, _, 1, _, _, 1, 1, _, _, _, 1, 1, _, _, 1, 1, _, _, 1, _, _, 1, _, 1, _, _, 1, _, _, _, _, _, 1, 1, 1, _, _, _, _, 5, _, _, _, 3],
    [1, _, _, 1, _, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, 1, 1, 1, _, _, 5, _, _, 1, _, _, 1, _, _, _, 5, 1, _, 1, 1, _, _, _, 5, _, _, _, 1, _, _, 4, _, _, _, _, 1, _, _, _, 1, 1, 1, _, _, _, 1, _, _, 1, _, _, _, 1],
    [1, _, _, 1, 1, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, 1, _, _, _, _, _, 1, _, _, _, _, 1, _, 1, _, _, _, _, 1, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, 1, 1, _, 1, 1, 1],
    [1, _, _, _, 1, _, 1, _, 1, _, 1, _, 1, _, 1, _, _, _, _, _, _, 1, _, _, _, 1, 1, 1, _, 1, _, _, _, _, _, _, _, 1, _, 1, 1, 1, 1, 1, _, _, 1, _, _, 1, 5, 1, 1, 1, 1, _, _, _, _, _, _, 1, _, _, _, _, 1, _, 1],
    [1, 1, _, 1, 1, _, _, _, _, _, _, _, _, _, 1, _, 1, 1, 1, 1, _, 1, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, 1, _, _, _, _, _, 1, 1, _, 1, _, _, _, 1, 1, _, 1],
    [1, _, _, 1, _, _, 1, _, 1, _, 1, _, 1, _, 1, _, 1, 6, _, 1, _, 1, _, _, _, 1, _, _, _, 1, 1, 1, 7, 1, 1, 1, 4, 1, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, 1, _, _, _, _, _, 1, _, _, 1, _, _, _, _, _, _, 1],
    [6, _, 1, 1, 1, _, _, _, _, _, _, _, _, _, _, _, 2, 1, _, 1, _, _, _, 1, _, _, _, _, _, 5, _, 1, _, _, _, 1, _, 1, _, _, _, 1, 1, 1, _, _, 1, 1, 1, 1, _, _, 1, _, 1, 1, 7, 1, 1, _, _, _, _, _, _, _, 1, _, 1],
    [1, _, _, _, _, _, 1, _, 1, _, 1, _, 1, _, 1, _, 1, _, _, 1, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, 1, _, _, _, 1, _, 1, _, _, 1, _, _, _, _, _, 1, _, _, _, _, _, 1, _, _, _, _, 1, _, _, 7, _, 1],
    [1, 1, _, 1, 1, _, _, _, _, _, _, _, _, _, 1, _, 1, _, 1, 1, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, 1, 1, 1, 1, _, _, 1, 5, _, 1, 1, _, 1, _, _, _, _, _, 1, _, _, _, _, _, 1, _, _, 1, 1, 1, 1, _, 1, _, 1],
    [1, _, _, _, _, _, 1, _, 1, _, 1, _, 1, _, 1, _, 1, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, 1, _, _, _, _, _, _, _, _, 1, _, _, 1, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, 1],
    [1, _, _, _, 1, _, _, _, _, _, _, _, _, _, 1, _, 4, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, 1, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, 1, _, _, 1, 1, 1, _, _, 1, _, _, 1, 1, 1],
    [1, 1, _, 1, 1, 1, 4, 1, 1, 6, 1, 4, 1, 1, 1, _, 1, _, _, _, _, _, _, _, _, 1, _, _, 1, 1, _, _, _, _, 1, _, _, 1, _, _, 1, 1, 1, 1, 1, _, _, _, _, 1, _, _, _, _, _, 1, _, _, _, _, _, _, _, 1, _, _, 1, _, 1],
    [1, _, _, _, 1, _, _, _, _, 1, _, 1, _, _, _, _, 1, _, 1, 1, _, _, 1, 1, _, 1, _, _, _, 1, _, 1, 1, 4, 1, _, _, 6, _, _, _, _, _, _, _, _, 1, _, 1, 1, 1, 1, 1, 1, _, 1, _, _, _, _, _, _, _, _, _, _, 1, _, 1],
    [1, 1, 1, _, 1, _, _, _, _, 1, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, 1, _, _, _, 1, _, _, _, _, 1, _, _, 1, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, 1, _, _, 1, _, _, 1, _, _, _, _, _, _, _, 1, _, 1],
    [1, _, 1, _, 1, _, _, _, _, 1, _, 1, 1, 1, 1, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, 1, _, _, 1, _, _, 1, 1, _, 1, 1, _, 6, _, _, 1, 1, _, 1, _, 1, 1, _, _, 1, 1, 1, 1, _, 1, _, 1, 1, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, 1, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, 1, _, _, _, _, _, 1, _, _, _, _, _, 1, _, _, 1, _, _, _, _, _, 1, _, 1, _, _, _, _, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1, 1, 1, 1, 1],
]

class Map:
    def __init__(self, game):
        self.game = game
        self.mini_map = mini_map
        self.world_map = {} # all coordinates with a wall
        self.open_map = {}  # all coordiantes without a wall
        self.get_map()
        self.get_empty()

    def get_map(self):
        for y, row in enumerate(self.mini_map):
            for x, col in enumerate(row):
                if col:
                    self.world_map[(x, y)] = col

    def get_empty(self):
        for y, row in enumerate(self.mini_map):
            for x, col in enumerate (row):
                if not col:
                    self.open_map[(x, y)] = col
    
    def draw(self):
        for pos in self.world_map:
            pygame.draw.rect(self.game.screen, "darkgray", (pos[0] * 100, pos[1] * 100, 100, 100), 2)
